<?php
/**
 * @file
 * Code for the Good Help module.
 */

include 'goodhelp.features.inc';

/**
 * Implements hook_menu().
 */
function goodhelp_menu() {
  $items = array();

  // Configuration page for googhelp.
  $items['admin/config/content/goodhelp'] = array(
    'title' => 'Good Help Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('goodhelp_settings_form'),
    'file' => 'goodhelp.pages.inc',
    'access arguments' => array('access administration pages'),
  );

  // Goodhelp preview page.
  $items['goodhelp/preview'] = array(
    'title' => 'Goodhelp Preview',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('goodhelp_preview_page'),
    'file' => 'goodhelp.pages.inc',
    'access arguments' => array('use goodhelp preview'),
    'menu_name' => 'main-menu',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function goodhelp_permission() {
  return array(
    'use goodhelp preview' => array(
      'title' => t('use goodhelp preview'),
      'description' => t('Double check how help topics will appear to users for a given product version.'),
    ),
  );
}

/**
 * Implements hook_node_validate().
 */
function goodhelp_node_validate($node, $form, &$form_state) {
  if ($node->type != 'goodhelp_topic') {
    return;
  }

  // Check if the submitted help topic + product + version combo is unique.
  $topic_id = $form_state['values']['field_goodhelp_topic_id']['und'][0]['value'];
  $product = $form_state['values']['field_goodhelp_topic_product']['und'][0]['value'];
  $version = $form_state['values']['field_goodhelp_topic_version']['und'][0]['value'];
  $topic = _goodhelp_find_topic_instance($topic_id, $product, $version);

  if (!empty($topic)) {
    // Check if it's the same node as the current one.
    if ($topic[$version]->nid != $node->nid) {
      $node_link = l(t('already'), 'node/' . $topic[$version]->nid);
      $error = t('There is !already a page for this topic and version.', array('!already' => $node_link));
      form_set_error('field_goodhelp_topic_version', $error);
    }
  }
}

/**
 * Load the help topic node.
 *
 * @param $id
 *   Machine ID of the required topic.
 * @param $product
 *   Product machine name of the topic.
 * @param $version
 *   Version of the topic to collect.
 *
 * @return
 *   Node object, or FALSE if none was found.
 */
function goodhelp_topic_load($topic_id, $product, $version) {
  $topics = _goodhelp_find_topic_instance($topic_id, $product);
  // Select a version from the ones returned.
  if ($return_version = goodhelp_select_version(array_keys($topics), $version)) {
    $topic = $topics[$return_version];
  }
  if (isset($topic->nid)){
    return node_load($topic->nid);
  }
  return FALSE;
}

/**
 * Find topics that match a certain topic id, product, and (optionally) version.
 *
 * @param $topic_id
 *   Machine ID of the required topic.
 * @param $topic
 *   Product name.
 * @param $version
 *   Version of the topic to collect.
 *
 * @return
 *   An array of node ids matching the search criteria, keyed by version.
 */
function _goodhelp_find_topic_instance($topic_id, $product, $version = NULL) {
  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->innerJoin('field_data_field_goodhelp_topic_id', 'gti', "gti.entity_id = n.nid AND gti.revision_id = n.vid AND gti.entity_type = 'node'");
  $query->leftJoin('field_data_field_goodhelp_topic_version', 'gtv', "gtv.entity_id = n.nid AND gtv.revision_id = n.vid AND gtv.entity_type = 'node'");
  $query->leftJoin('field_data_field_goodhelp_topic_product', 'gtp', "gtp.entity_id = n.nid AND gtp.revision_id = n.vid AND gtp.entity_type = 'node'");
  $query->addField('gtv', 'field_goodhelp_topic_version_value', 'version');
  $query
    ->condition('n.status', 1, '=')
    ->condition('gti.field_goodhelp_topic_id_value', $topic_id, '=')
    ->condition('gtp.field_goodhelp_topic_product_value', $product, '=');

  // Add in a version condition if version is specified.
  if (isset($version)) {
    $query->condition('gtv.field_goodhelp_topic_version_value', $version, '=');
  }

  // Return all the topics found, keyed by version.
  return $query->execute()->fetchAllAssoc('version');
}

/**
 * Returns the version that should be used, given the options and target version.
 * Takes into account the fallback settings.
 *
 * @param $options
 *  An array of version numbers. Must be formatted as numbers separated by periods.
 * @param $target
 *  A target version to return. If this version is not present, it will return
 *  an appropriate fallback version.
 *
 * @return A version number if found, or FALSE if none was found.
 */
function goodhelp_select_version($options, $target) {
  $result = FALSE;
  // Check for the target version directly.
  if (in_array($target, $options)) {
    $result = $target;
  }
  else {
    // If fallback is allowed at all...
    $fallback_settings = variable_get('goodhelp_fallback', 0);
    if ($fallback_settings != 0) {
      // Look for the closest version available.
      usort($options, 'version_compare');
      $version_parts = explode('.', $target);
      foreach ($options as $option) {
        $compare = version_compare($option, $target);
        if ($compare == -1) {
          switch ($fallback_settings) {
            case '1':
              $base = $version_parts[0];
              break;
            case '2':
              $base = $version_parts[0] . '.' . $version_parts[1];
              break;
          }
          if (strpos($option, $base) === 0) {
            $result = $option;
          }
        }
        else {
          break;
        }
      }
    }
  }
  return $result;
}

/**
 * Implements hook_services_resource_alter().
 */
function goodhelp_services_resources_alter(&$resources, $endpoint) {
  // Add topic resource.
  // [POST] {endpoint}/topic/{topicname}/product/{productname}/version/{version}/{tip|manual|guide}
  $resources['topic']['relationships']['product'] = array(
    'help' => 'Retrieve the teaser or body of a given topic, product, and version',
    'callback' => '_goodhelp_services_retrieve',
    'args' => array(
      array(
        'name' => 'topic',
        'type' => 'string',
        'description' => 'A valid string topic name',
        'source' => array('path' => '0'),
        'optional' => FALSE,
      ),
      array(
        'name' => 'product',
        'type' => 'string',
        'description' => 'A valid product name',
        'source' => array('path' => '2'),
        'optional' => FALSE,
      ),
      array(
        'name' => 'version',
        'type' => 'string',
        'description' => 'A valid version of a given topic',
        'source' => array('path' => '4'),
        'optional' => FALSE,
      ),
      array(
        'name' => 'size',
        'type' => 'string',
        'description' => 'Either tip, manual or guide, specifiying the size/type of the content to be returned',
        'source' => array('path' => '5'),
        'optional' => TRUE,
      ),
    ),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'access arguments append' => FALSE,
  );
}

/**
 * Services callback for retrieving topic node details.
 */
function _goodhelp_services_retrieve($topic, $product, $version, $size = 'manual') {
  $node = goodhelp_topic_load($topic, $product, $version);

  // Node sanity check
  if (!isset($node->nid)) {
    return services_error('Topic or version not found', 404);
  }

  switch ($size) {
    case 'tip':
      $teaser = node_view($node, 'teaser');
      $message = $teaser['body'][0]['#markup'];
      break;
    default:
      $message = $node->body['und'][0]['safe_value'];
  }

  return array(
    'response' => array(
      'status' => 200,
      'topic' => $topic,
      'requestedVersion' => $version,
      'version' => $node->field_goodhelp_topic_version['und'][0]['value'],
      'size' => $size,
      'title' => $node->title,
      'message' => $message,
    ),
  );
}

/**
 * Implements hook_field_form_FORM_ID_alter().
 */
function goodhelp_form_goodhelp_topic_node_form_alter(&$form, &$form_state) {
  // Make version field dependent on product.
  $form['field_goodhelp_topic_product']['und']['#ajax'] = array(
    'wrapper' => 'goodhelp-version-ajax-wrapper',
    'callback'=> 'goodhelp_version_ajax_callback',
  );
  $form['field_goodhelp_topic_version']['#prefix'] = '<div id="goodhelp-version-ajax-wrapper">';
  $form['field_goodhelp_topic_version']['#suffix'] = '</div>';
  
  // Update the version field if there is a product selected in form_state.
  if (isset($form_state['values']['field_goodhelp_topic_product']['und'][0]['value'])) {
    $product = $form_state['values']['field_goodhelp_topic_product']['und'][0]['value'];
    if (goodhelp_hit_max($product)) {
      $options = goodhelp_get_supported_versions($product);
      drupal_set_message(t('The maximum number of versions is already being supported for this product, so you may only add pages for one of those versions. To start help for a new version, you must first remove support for an earlier version.'), 'warning');
    }
    else {
      $options = goodhelp_version_options($product);
    }
    $form['field_goodhelp_topic_version']['und']['#options'] = $options;
  }
  elseif (arg(2) == 'edit') {
    // Set the options for the versions field.
    $product = $form['field_goodhelp_topic_product']['und']['#default_value'][0];
    $options = goodhelp_version_options($product);
    $form['field_goodhelp_topic_version']['und']['#options'] = $options;
  }
  else {
    // Set to disabled. Product needs to be selected first.
    $form['field_goodhelp_topic_version']['und']['#options'] = array('- Select a value -');
    $form['field_goodhelp_topic_version']['und']['#disabled'] = TRUE;
  } 
  
  // Add a dropdown to help choose a topic id.
  $topic_id_suggestions = goodhelp_get_topic_id_options();
  if (!empty($topic_id_suggestions)) {
    $form['field_goodhelp_topic_id']['#prefix'] = '<div id="goodhelp-topic-ajax-wrapper">';
    $form['field_goodhelp_topic_id']['#suffix'] = '</div>';
    $form['goodhelp_topic_id_select'] = array(
      '#type' => 'select',
      '#title' => 'Topic Suggestions',
      '#options' => goodhelp_get_topic_id_options(),
      '#weight' => $form['field_goodhelp_topic_id']['#weight'] - 0.5,
      '#description' => t('Choose a topic from this list, or enter a custom one below.'),
      '#ajax' => array(
        'wrapper' => 'goodhelp-topic-ajax-wrapper',
        'callback' => 'goodhelp_topic_id_fill_ajax',
      ),
    );

    // If there's a topic selected in the dropdown, fill the textfield.
    if (isset($form_state['values']['goodhelp_topic_id_select'])) {
      if ($form_state['values']['goodhelp_topic_id_select'] != '_none') {
        $form['field_goodhelp_topic_id']['und'][0]['value']['#value'] = $form_state['values']['goodhelp_topic_id_select'];
      }
    }
  }
}

/**
 * Ajax callback for the Topic Version field.
 */
function goodhelp_version_ajax_callback($form, &$form_state) {
  return $form['field_goodhelp_topic_version'];
}

/**
 * Ajax callback for the Topic ID suggestion field.
 */
function goodhelp_topic_id_fill_ajax($form, &$form_state) {
  return $form['field_goodhelp_topic_id'];
}

/**
 * Returns a list of topic ID suggestions from other modules.
 */
function goodhelp_get_topic_id_options() {
  $none = array('_none' => '- Select one -');
  return $none + drupal_map_assoc(module_invoke_all('goodhelp_topic_id_options'));
}

/**
 * Allowed values callback for the goodhelp_topic_product field.
 */
function goodhelp_product_options() {
  $products = array();
  $product_info = goodhelp_get_product_info();
  foreach ($product_info as $product => $info) {
    if (goodhelp_max_versions($product) != 0) {
      $products[$product] = $info['name'];
    }
  }
  return $products;
}

/**
 * Returns the versions available for a given product.
 * 
 * @param $product
 *  A product machine name to return the versions for.
 */
function goodhelp_version_options($product) {
  $versions = array();
  if (isset($product)) {
    $products = goodhelp_get_product_info();
    if (isset($products[$product])) {
      $versions = $products[$product]['versions'];
    }
  }
  return drupal_map_assoc($versions);
}

/**
 * Get basic information about all products.
 *
 * @param $product
 *   A product machine name.
 *
 * @return An associative array, keyed by product machine name, containing
 * information about all products.
 *
 * @see goodhelp.api.php
 */
function goodhelp_get_product_info() {
  return module_invoke_all('goodhelp_product_info');
}

/**
 * Returns a list of the versions currently supported for the given product. A
 * version is considered supported if there are any topics for it.
 *
 * @param $product
 *   A product machine name.
 */
function goodhelp_get_supported_versions($product) {
  $query = db_select('field_revision_field_goodhelp_topic_version', 'version');
  $query->addField('version', 'field_goodhelp_topic_version_value', 'value');
  $query->leftJoin('field_revision_field_goodhelp_topic_product', 'product', "version.entity_id = product.entity_id");
  $query->condition('product.field_goodhelp_topic_product_value', $product, '=');
  $query->distinct();
  $result = $query->execute()->fetchCol();
  return drupal_map_assoc($result);
}

/**
 * Returns an array of all the possible version names. This serves as the allowed 
 * values callback for the goodhelp_topic_version field.
 *
 * @param $field_info
 *   Specified by the field module when it calls this function.
 */
function goodhelp_get_all_versions($field_info = NULL) {
  $versions = array();
  $info = goodhelp_get_product_info();
  foreach ($info as $product) {
    $versions += drupal_map_assoc($product['versions']);
  }
  return $versions;
}

/**
 * Returns TRUE if the product's number currently supported versions equals
 * the the maximum allowed supported versions for that product, otherwise FALSE.
 */
function goodhelp_hit_max($product) {
  $max = goodhelp_max_versions($product);
  $supported = count(goodhelp_get_supported_versions($product));
  if ($supported >= $max) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns the maximum allowed supported versions for a product.
 *
 * @param $product
 *   A product machine name.
 *
 * @return The number of allowed versions, or 0 if not set.
 */
function goodhelp_max_versions($product) {
  $maxes = variable_get('goodhelp_max_versions', array());
  if (isset($maxes[$product])) {
    return $maxes[$product];
  }
  return 0;
}