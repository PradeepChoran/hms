<?php
/**
 * @file
 * Code for HMS Book Clone.
 */

/**
 * Implements hook_menu().
 */
function hms_book_clone_menu() {
  $items['goodhelp/clone/%'] = array(
    'title' => 'Clone Help Book',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hms_book_clone_clone_form'),
    'access arguments' => array('access content'),
    'file' => 'hms_book_clone.pages.inc',
  );
  return $items;
}

/**
 * The batch controller for the clone operation.
 */
function hms_book_clone_batch() {
  $batch = array(
    'operations' => array('hms_book_clone_clone'),
    'finished' => 'hms_book_clone_batch_finished',
    'title' => t('Cloning help book'),
    'init_message' => t('Beginning cloning...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('The cloning operation has encountered an error.'),
  );
  batch_set($batch);
}

/**
 * 
 */
function hms_book_clone_batch_finished() {
  dpm('finished!');
}

/**
 * Batch operation that clones a book a few pages at a time.
 */
function hms_book_clone_clone($bid) {
  // $context['sandbox'] stores information needed to track progression between successive calls.
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;

    // Save node count for the termination message.
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT nid) FROM {node}')->fetchField();
  }

  // The number of pages to clone in one iteration
  $limit = 2;

  // Retrieve the next group of nids.
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->orderBy('n.nid', 'ASC')
    ->where('n.nid > :nid', array(':nid' => $context['sandbox']['current_node']))
    ->extend('PagerDefault')
    ->limit($limit)
    ->execute();
  foreach ($result as $row) {
    // Here we actually perform our dummy 'processing' on the current node.
    $node = node_load($row->nid, NULL, TRUE);

    // Store some result for post-processing in the finished callback.
    $context['results'][] = $node->nid . ' : ' . check_plain($node->title) . ' ' . $operation_details;

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = check_plain($node->title);
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = ($context['sandbox']['progress'] >= $context['sandbox']['max']);
  }
  _batch_example_update_http_requests();
}